{"name":"Dockerclient","tagline":"Docker client library in Go","body":"Docker client library in Go\r\n===========================\r\n[![GoDoc](http://godoc.org/github.com/samalba/dockerclient?status.png)](http://godoc.org/github.com/samalba/dockerclient)\r\n\r\nWell maintained docker client library.\r\n\r\nExample:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/samalba/dockerclient\"\r\n\t\"log\"\r\n\t\"time\"\r\n)\r\n\r\n// Callback used to listen to Docker's events\r\nfunc eventCallback(event *dockerclient.Event, args ...interface{}) {\r\n\tlog.Printf(\"Received event: %#v\\n\", *event)\r\n}\r\n\r\nfunc main() {\r\n\t// Init the client\r\n\tdocker, _ := dockerclient.NewDockerClient(\"unix:///var/run/docker.sock\", nil)\r\n\r\n\t// Get only running containers\r\n\tcontainers, err := docker.ListContainers(false)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tfor _, c := range containers {\r\n\t\tlog.Println(c.Id, c.Names)\r\n\t}\r\n\r\n\t// Inspect the first container returned\r\n\tif len(containers) > 0 {\r\n\t\tid := containers[0].Id\r\n\t\tinfo, _ := docker.InspectContainer(id)\r\n\t\tlog.Println(info)\r\n\t}\r\n\r\n\t// Create a container\r\n\tcontainerConfig := &dockerclient.ContainerConfig{Image: \"ubuntu:12.04\", Cmd: []string{\"bash\"}}\r\n\tcontainerId, err := docker.CreateContainer(containerConfig)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\t// Start the container\r\n\terr = docker.StartContainer(containerId)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\t// Stop the container (with 5 seconds timeout)\r\n\tdocker.StopContainer(containerId, 5)\r\n\r\n\t// Listen to events\r\n\tdocker.StartMonitorEvents(eventCallback)\r\n\ttime.Sleep(3600 * time.Second)\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}